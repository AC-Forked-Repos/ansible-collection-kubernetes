---

# (c) Wong Hoi Sing Edison <hswong3i@pantarei-design.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- hosts: kube_master:kube_node
  remote_user: root
  become: true
  tasks:
    - include_role:
        name: kubectl
      tags: kubectl

    - include_role:
        name: kubeadm
      tags: kubeadm

    - include_role:
        name: kubelet
      tags: kubelet

    - include_role:
        name: operator_sdk
      tags: operator_sdk

- hosts: kube_master
  remote_user: root
  become: true
  tasks:
    - name: base64 encode
      shell: |
        set -o pipefail
        tar zcfP - {{ _params | join(' ') }} | base64 -w 0
      vars:
        _params:
          - "{{ kubernetes_etcd.external.caFile }}"
          - "{{ kubernetes_etcd.external.certFile }}"
          - "{{ kubernetes_etcd.external.keyFile }}"
      args:
        executable: "/bin/bash"
      when: inventory_hostname == ansible_play_hosts[0]
      delegate_to: "{{ groups['etcd'][0] }}"
      register: base64_encode_result
      changed_when: base64_encode_result is not succeeded
      tags: kube_master

    - name: base64 decode
      shell: |
        set -o pipefail
        echo -n {{ base64_encode_result.stdout | quote }} | base64 -d | tar zx -C /
      args:
        executable: "/bin/bash"
      when: inventory_hostname == ansible_play_hosts[0]
      register: base64_decode_result
      changed_when: base64_decode_result is not succeeded
      tags: kube_master

    - include_role:
        name: kube_master
      tags: kube_master

    - include_role:
        name: kubernetes_addon_manager
      tags: kubernetes_addon_manager

- hosts: kube_node:!kube_master
  remote_user: root
  become: true
  tasks:
    - name: base64 encode
      shell: |
        set -o pipefail
        tar zcfP - {{ item.value | join(' ') }} | base64 -w 0
      with_dict:
        base64:
          - "/etc/kubernetes/admin.conf"
      args:
        executable: "/bin/bash"
      delegate_to: "{{ groups['kube_master'][0] }}"
      register: base64_encode_result
      changed_when: base64_encode_result is not succeeded
      tags: kube_node

    - name: base64 decode
      shell: |
        set -o pipefail
        echo -n {{ base64_encode_result.results[0].stdout | quote }} | base64 -d | tar zx -C /
      args:
        executable: "/bin/bash"
      register: base64_decode_result
      changed_when: base64_decode_result is not succeeded
      tags: kube_node

    - name: kubeadm token create
      environment:
        PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      shell: |
        set -o pipefail
        kubeadm token create
      args:
        executable: "/bin/bash"
      delegate_to: "{{ groups['kube_master'][0] }}"
      register: kube_admin_token_result
      until: kube_admin_token_result is succeeded
      changed_when: kube_admin_token_result is not succeeded
      ignore_errors: true
      tags: kube_node

    - include_role:
        name: kube_node
      vars:
        kubeadm_token: "{{ kube_admin_token_result.stdout }}"
      tags: kube_node

- hosts: kube_master:kube_node
  remote_user: root
  become: true
  handlers:
    - name: kubelet | systemctl daemon-reload
      systemd:
        daemon_reload: true
      changed_when: false
      ignore_errors: true

    - name: kubelet | systemctl restart kubelet
      service:
        name: "kubelet"
        state: "restarted"
        enabled: true
      loop: "{{ ansible_play_hosts }}"
      delegate_to: "{{ item }}"
      run_once: true
      changed_when: false
      ignore_errors: true

  tasks:
    - name: prepare directories
      file:
        dest: "{{ item.dest }}"
        owner: "{{ item.owner | default('root') }}"
        group: "{{ item.group | default('root') }}"
        mode: "{{ item.mode | default('0755') }}"
        state: "{{ item.state | default('directory') }}"
      loop:
        - { dest: "/lib/systemd/system/kubelet.service.d" }

    - name: copy templates
      template:
        dest: "{{ item.dest }}"
        src: "{{ item.src | default('./templates' + item.dest + '.j2') }}"
        owner: "{{ item.owner | default('root') }}"
        group: "{{ item.group | default('root') }}"
        mode: "{{ item.mode | default('0644') }}"
      loop:
        - { dest: "/lib/systemd/system/kubelet.service.d/crio.conf" }
      notify:
        - kubelet | systemctl daemon-reload
        - kubelet | systemctl restart kubelet

    - name: copy templates
      template:
        dest: "{{ item.dest }}"
        src: "{{ item.src | default('./templates' + item.dest + '.j2') }}"
        owner: "{{ item.owner | default('root') }}"
        group: "{{ item.group | default('root') }}"
        mode: "{{ item.mode | default('0644') }}"
      loop:
        - { dest: "/lib/systemd/system/kubelet.service.d/etcd.conf" }
      when: inventory_hostname in groups['etcd']
      notify:
        - kubelet | systemctl daemon-reload
        - kubelet | systemctl restart kubelet

    - name: copy templates
      template:
        dest: "{{ item.dest }}"
        src: "{{ item.src | default('./templates' + item.dest + '.j2') }}"
        owner: "{{ item.owner | default('root') }}"
        group: "{{ item.group | default('root') }}"
        mode: "{{ item.mode | default('0644') }}"
      loop:
        - { dest: "/lib/systemd/system/kubelet.service.d/ceph.conf" }
      when: inventory_hostname in groups['ceph_mon'] or
            inventory_hostname in groups['ceph_mgr'] or
            inventory_hostname in groups['ceph_osd'] or
            inventory_hostname in groups['ceph_mds'] or
            inventory_hostname in groups['ceph_rgw']
      notify:
        - kubelet | systemctl daemon-reload
        - kubelet | systemctl restart kubelet

    - name: flush handlers
      meta: flush_handlers

- hosts: ansible
  remote_user: root
  become: true
  tasks:
    - include_role:
        name: operator_sdk
      tags: operator_sdk

    - include_role:
        name: kubectl
      tags: kubectl

    - name: base64 encode
      shell: |
        set -o pipefail
        tar zcfP - {{ item.value | join(' ') }} | base64 -w 0
      with_dict:
        base64:
          - "/etc/kubernetes/admin.conf"
      args:
        executable: "/bin/bash"
      delegate_to: "{{ groups['kube_master'][0] }}"
      register: base64_encode_result
      changed_when: base64_encode_result is not succeeded
      tags: kubectl

    - name: base64 decode
      shell: |
        set -o pipefail
        echo -n {{ base64_encode_result.results[0].stdout | quote }} | base64 -d | tar zx -C /
      args:
        executable: "/bin/bash"
      register: base64_decode_result
      changed_when: base64_decode_result is not succeeded
      tags: kubectl
